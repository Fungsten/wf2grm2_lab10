/*
Will Fung and Grace Mazzarella
You will notice Groot has once again come back.
If you haven't already, you should go see Guardians of the Galaxy Vol. 2
(this project not endorsed by Marvel or Disney)
Answers to thought questions at the bottom of the README because the
instructions never indicated where you wanted them.

Dontcha love very verbose and vindictive descriptions?
*/

import java.util.Iterator;
import structure5.*;

public class GameTree{

  GameNode groot;
  HexBoard startBoard;
  int nodeNumber;

  //This is a gametree
  //Starting from a game board at its beginning state, this creates the first node
  //that symbolizes the zeroth move in a game
  public GameTree(){
    this.startBoard = new HexBoard(3, 3);
    this.groot = new GameNode(false, this.startBoard, HexBoard.BLACK, null, null);
    this.nodeNumber = 0;
    populate(this.groot);
  }

  // Takes a GameNode and gives it children based on the possible moves allowed by the current board
  public void addNodes(GameNode parent){
    GameNode gn;
  	Vector<HexMove> moves;
    HexBoard newBoard;

    // Borrowed from the HexBoard demonstration; populates a vector with possible moves
    moves = parent.currBoard.moves(parent.color);
    // Walk down moves (or runs, or uh, whatever it is that computers do...)
    for (int i = 0; i < moves.size(); ++i){
      // Create a new board based on the parent and the moves generated by that parent
      newBoard = new HexBoard(parent.currBoard, moves.elementAt(i));
      // Create a new node based on the board and the current move
      gn = new GameNode(newBoard.win(parent.color), newBoard, HexBoard.opponent(parent.color), parent, moves.elementAt(i));
      // Add each GameNode generated with the HexMoves in moves
      parent.addChild(gn);
      // For testing purposes, keep track of how many nodes have been added
      ++this.nodeNumber;
    }
  }


  public void populate(GameNode parent){
    // Fill vector with next levelo of possible moves for after parent's move
    Vector<HexMove> moves = parent.currBoard.moves(parent.color);
    if (moves.size() == 0 || parent.isWin == true){
      // no more possible moves, so no more children to add; pass
      //also a win, so all possible moves after this are moot; pass sum moar
      return;
    } else {
      // add children to current node
      addNodes(parent);
      // add children to each child node
      assert(parent.children.size() < 5);
      for (int i = 0; i < parent.children.size(); ++i){
        //recursive fun for the whole family
        populate(parent.children.elementAt(i));
      }
    }
  }

  public static void main(String[] args){
    GameTree babygroot = new GameTree();
    System.out.println(babygroot.groot.toSillyString());
    System.out.println(babygroot.groot.children.toString());
    babygroot.populate(babygroot.groot);
    for (int i = 0; i < babygroot.groot.children.size(); ++i){
      System.out.println(babygroot.groot.children.elementAt(i));
      System.out.println(babygroot.groot.children.elementAt(i).toSillyString());
      System.out.println(babygroot.groot.children.elementAt(i).children);
    }

    System.out.println("node number: " + babygroot.nodeNumber);
  }

}
