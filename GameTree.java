/*
Will Fung and Grace Mazzarella
*/

import java.util.Iterator;
import structure5.*;

public class GameTree{

  GameNode groot;
  HexBoard startBoard;
  //char color; // needed? A node-only thing?
  //public final static char WHITE = 'o';
  //public final static char BLACK = '*';
  int nodeNumber;
  int counter;


  public GameTree(){
    this.startBoard = new HexBoard();
    this.groot = new GameNode(false, this.startBoard, null, HexBoard.BLACK);
    this.nodeNumber = 0;
    this.counter = 0;
  }

  // Takes a GameNode and gives it children based on the possible moves allowed by the current board
  public void addNodes(GameNode parent, char color){
    GameNode gn;
  	Vector<HexMove> moves;
    HexBoard newBoard;
  	int move = 0;

    // Borrowed from the HexBoard demonstration; populates a vector with possible moves
    moves = parent.currBoard.moves(color);
    // For testing purposes, keep track of how many nodes have been added
    nodeNumber = nodeNumber + moves.size();
    // Walk down moves
    Iterator iter = moves.iterator();
    while (iter.hasNext()){
      // Create a new board based on the parent and the moves generated by that parent
      newBoard = new HexBoard(parent.currBoard, moves.elementAt(move));
      // Create a new node based on the board and the current move
      gn = new GameNode(newBoard.win(color), newBoard, moves.elementAt(move), color);
      // Add each GameNode generated with the HexMoves in moves
      parent.addChild(gn);
      // Increment the iterator
      iter.next();
      // Keep count
      ++move;
    }
  }


  public void populate(GameNode parent){
    // Fill vector with possible moves for parent node
    Vector<HexMove> moves = parent.currBoard.moves(parent.color);
    if (moves.size() == 0){
      // no more moves, so no more children to add; pass
    } else {
      // add children to current node
      addNodes(parent, HexBoard.opponent(parent.color));
      // add children to each child node
      for (int i = 0; i < parent.children.size(); ++i){
        populate(parent.children.elementAt(i));
      }
    }
  }

  public static void main(String[] args){
    GameTree babygroot = new GameTree();
    babygroot.addNodes(babygroot.groot, HexBoard.BLACK);
    System.out.println(babygroot.groot.toSillyString());
    System.out.println(babygroot.groot.children.toString());
    babygroot.populate(babygroot.groot);
    for (int i = 0; i < babygroot.groot.children.size(); ++i){
      System.out.println(babygroot.groot.children.elementAt(i));
      System.out.println(babygroot.groot.children.elementAt(i).toSillyString());
      System.out.println(babygroot.groot.children.elementAt(i).children);
    }

    System.out.println("node number: " + babygroot.nodeNumber);
  }

}
